name: Build and Release

on:
  pull_request:
    branches:
      - main  # Trigger on pull requests targeting the main branch
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build:
    runs-on: macos-latest  # Use the latest macOS runner

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3  # Check out the repository to get the code

      # Step 2: Set up JDK 17 (Temurin distribution)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'           # Set Java version to 17
          distribution: 'temurin'      # Use Adoptium Temurin JDK

      # Step 3: Validate the Gradle wrapper
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1  # Ensure the Gradle wrapper is correct and available

      # Step 4: Build and Test with Gradle
      - name: Build & Test with Gradle
        uses: gradle/gradle-build-action@v2  # Use the latest stable Gradle build action
        with:
          arguments: build  # This runs the Gradle build task

      # Step 5: Upload build artifacts (e.g., JAR files, APKs, etc.)
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3  # Upload the built files as artifacts
        with:
          name: build-artifacts      # Name of the artifact
          path: app/build/outputs/apk/release/app-release.apk  # Path to the APK file

  release:
    runs-on: macos-latest
    needs: build  # Ensure this job runs after the 'build' job
    steps:
      # Step 1: Checkout repository again (needed for the release job)
      - name: Checkout repository
        uses: actions/checkout@v3  # Check out the repository code

      # Step 2: Create a GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1  # Create a release on GitHub
        with:
          tag_name: v1.0.0  # Define the tag for the release, you can dynamically change this
          release_name: "Release v1.0.0"  # Define the release name
          draft: false  # Set to false to make the release public
          prerelease: false  # Set to false for a stable release
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}  # Use GitHub token to authenticate

      # Step 3: Upload APK to GitHub release
      - name: Upload APK to release
        uses: actions/upload-release-asset@v1  # Upload the APK file to the release
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Get the upload URL from the create-release step
          asset_path: app/build/outputs/apk/release/app-release.apk  # Path to the APK file
          asset_name: app-release.apk  # Name of the APK file
          asset_content_type: application/vnd.android.package-archive  # Content type for APK